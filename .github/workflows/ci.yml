name: CI Pipeline

on:
  push:
    branches: [ main, develop, 'feature/**' ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  GO_VERSION: '1.24.0'
  DOCKER_REGISTRY: ghcr.io
  DOCKER_IMAGE_NAME: youtube-transcript-mcp

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Lint and format check
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Check formatting
      run: |
        if [ -n "$(gofmt -l .)" ]; then
          echo "::error::Go code is not formatted. Run 'make fmt'"
          gofmt -d .
          exit 1
        fi
        
    - name: Run go vet
      run: go vet ./...
      
    - name: Verify dependencies
      run: |
        go mod verify
        go mod tidy
        if [ -n "$(git status --porcelain go.mod go.sum)" ]; then
          echo "::error::go.mod or go.sum is not up to date. Run 'go mod tidy'"
          exit 1
        fi

  # Test job
  test:
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Run tests
      run: |
        go test -v -race -short -shuffle=on -coverprofile=coverage.txt -covermode=atomic ./...
        
    - name: Upload coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.txt
        flags: unittests
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

  # Security scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      security-events: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Run Gosec
      run: |
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        gosec -fmt sarif -out gosec-results.sarif -severity medium ./... || true
        
    - name: Upload Gosec results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec-results.sarif
        category: gosec

  # Build job
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Build binary
      run: |
        CGO_ENABLED=0 go build -o youtube-mcp ./cmd/server
        
        # Test binary exists
        ls -la youtube-mcp
        
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: youtube-mcp-linux-amd64
        path: youtube-mcp
        retention-days: 7

  # Docker build (only for main branch and tags)
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    timeout-minutes: 15
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix=sha-,format=short
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Release job
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, docker]
    timeout-minutes: 10
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: youtube-mcp-linux-amd64
        path: release/
        
    - name: Create archive
      run: |
        cd release
        tar -czf youtube-mcp-linux-amd64.tar.gz youtube-mcp
        shasum -a 256 youtube-mcp-linux-amd64.tar.gz > checksums.sha256
        cd ..
        
    - name: Generate changelog
      run: |
        echo "# Release ${{ github.ref_name }}" > RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "## Changes" >> RELEASE_NOTES.md
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 2>/dev/null || echo "")..HEAD >> RELEASE_NOTES.md || echo "- Initial release" >> RELEASE_NOTES.md
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        name: ${{ github.ref_name }}
        body_path: RELEASE_NOTES.md
        files: |
          release/youtube-mcp-linux-amd64.tar.gz
          release/checksums.sha256
        draft: false
        prerelease: ${{ contains(github.ref_name, '-') }}