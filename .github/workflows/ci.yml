name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/**', 'release/**' ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly security scan on Mondays at 2 AM
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean

env:
  GO_VERSION: '1.23.0'
  DOCKER_REGISTRY: ghcr.io
  DOCKER_IMAGE_NAME: youtube-transcript-mcp

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Dependency check job - runs first to catch issues early
  dependency-check:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Verify dependencies
      run: |
        go mod verify
        go mod tidy
        if [ -n "$(git status --porcelain go.mod go.sum)" ]; then
          echo "::error::go.mod or go.sum is not up to date. Run 'go mod tidy'"
          exit 1
        fi
        
    - name: Install tools
      run: make tools
        
    - name: Check for vulnerable dependencies
      run: |
        .tools/bin/govulncheck ./...
        

  # Static analysis job
  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis
        
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache analysis tools
      uses: actions/cache@v4
      with:
        path: .tools/bin
        key: ${{ runner.os }}-go-tools-${{ hashFiles('**/go.sum', 'tools.go') }}
        restore-keys: |
          ${{ runner.os }}-go-tools-
          
    - name: Install analysis tools
      run: make tools
        
    - name: Run golangci-lint
      run: |
        echo "::warning::Skipping golangci-lint due to Go 1.24 compatibility issues"
        echo "Running individual linters instead..."
        
    - name: Run additional linters
      run: |
        echo "::group::Running staticcheck"
        .tools/bin/staticcheck ./... || true
        echo "::endgroup::"
        
        echo "::group::Running ineffassign"
        .tools/bin/ineffassign ./... || true
        echo "::endgroup::"
        
        echo "::group::Running revive"
        .tools/bin/revive -config .revive.toml ./... || true
        echo "::endgroup::"
        
    - name: Run go vet
      run: go vet ./...
      
    - name: Check formatting
      run: |
        if [ -n "$(gofmt -l .)" ]; then
          echo "::error::Go code is not formatted. Run 'make fmt'"
          gofmt -d .
          exit 1
        fi
        
    - name: Check imports
      run: |
        if [ -n "$(.tools/bin/goimports -l .)" ]; then
          echo "::error::Go imports are not formatted. Run 'goimports -w .'"
          .tools/bin/goimports -d .
          exit 1
        fi

  # Security scanning job
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Run Gosec Security Scanner
      run: |
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        gosec -fmt sarif -out gosec-results.sarif -severity medium ./... || true
        
    - name: Upload Gosec SARIF
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec-results.sarif
        category: gosec
        
    - name: Run Trivy vulnerability scanner (filesystem)
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-fs-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        
    - name: Upload Trivy SARIF
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: trivy-fs-results.sarif
        category: trivy-fs
        
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: go
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  # Main test job with matrix strategy
  test:
    name: Test (Go ${{ matrix.go-version }} on ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: [dependency-check]
    if: ${{ !inputs.skip_tests }}
    
    strategy:
      fail-fast: false
      matrix:
        go-version: ['1.22', '1.23.0']
        os: [ubuntu-latest, macos-latest, windows-latest]
        exclude:
          # Exclude older Go version on Windows to save time
          - os: windows-latest
            go-version: '1.22'
            
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
          ~/Library/Caches/go-build
          %LocalAppData%\go-build
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
          ${{ runner.os }}-go-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Build
      run: go build -v ./...
      
    - name: Run unit tests (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        go test -v -race -short -shuffle=on -coverprofile=coverage.txt -covermode=atomic ./...
        
    - name: Run unit tests (Windows)
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: go test -v -race -short -shuffle=on -coverprofile=coverage.txt -covermode=atomic ./...
        
    - name: Run tests with race detector
      if: matrix.os == 'ubuntu-latest'
      run: |
        go test -race -timeout 10m ./...
        
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == env.GO_VERSION
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.txt
        flags: unittests
        name: codecov-${{ matrix.os }}-go${{ matrix.go-version }}
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

  # Benchmark tests
  benchmark:
    name: Benchmark Tests
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Run benchmarks
      run: |
        go test -bench=. -benchmem -count=3 -run=^$ ./... | tee benchmark.txt
        
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark.txt
        
    - name: Compare benchmarks
      uses: benchmark-action/github-action-benchmark@v1
      if: github.event_name == 'push'
      with:
        tool: 'go'
        output-file-path: benchmark.txt
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
        comment-on-alert: true
        alert-threshold: '150%'
        fail-on-alert: true

  # Integration tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test, static-analysis]
    if: ${{ !inputs.skip_tests }}
    
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-
          
    - name: Set up test environment
      run: |
        cat > .env.test <<EOF
        LOG_LEVEL=debug
        SERVER_PORT=8080
        CACHE_TYPE=redis
        CACHE_REDIS_URL=localhost:6379
        YOUTUBE_RATE_LIMIT=100
        METRICS_ENABLED=true
        EOF
        
    - name: Build server
      run: |
        go build -o server ./cmd/server
        
    - name: Start server
      run: |
        ./server &
        echo $! > server.pid
        
        # Wait for server to be ready
        timeout=30
        while [ $timeout -gt 0 ]; do
          if curl -sf http://localhost:8080/health > /dev/null; then
            echo "Server is ready"
            break
          fi
          echo "Waiting for server... ($timeout)"
          sleep 1
          timeout=$((timeout - 1))
        done
        
        if [ $timeout -eq 0 ]; then
          echo "::error::Server failed to start"
          exit 1
        fi
        
    - name: Run integration tests
      run: |
        # Run MCP tests
        make test-mcp-init
        make test-mcp-tools
        make test-transcript
        
        # Run health checks
        make test-api
        
        # Run integration test suite if exists
        if [ -d "./tests/integration" ]; then
          go test -v -tags=integration ./tests/integration/...
        fi
        
    - name: Check server logs
      if: failure()
      run: |
        echo "::group::Server logs"
        if [ -f server.log ]; then
          cat server.log
        fi
        echo "::endgroup::"
        
    - name: Stop server
      if: always()
      run: |
        if [ -f server.pid ]; then
          kill $(cat server.pid) || true
          rm server.pid
        fi

  # Build job with multi-platform support
  build:
    name: Build (${{ matrix.goos }}/${{ matrix.goarch }})
    runs-on: ubuntu-latest
    needs: [test, static-analysis]
    
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64
          - goos: windows
            goarch: arm64
            
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-
          
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        VERSION="${GITHUB_REF_NAME#v}"
        if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          VERSION="dev-${GITHUB_SHA::8}"
        fi
        
        OUTPUT_NAME="youtube-mcp-${{ matrix.goos }}-${{ matrix.goarch }}"
        if [ "${{ matrix.goos }}" = "windows" ]; then
          OUTPUT_NAME="${OUTPUT_NAME}.exe"
        fi
        
        echo "Building ${OUTPUT_NAME} (version: ${VERSION})"
        
        CGO_ENABLED=0 go build \
          -ldflags="-w -s -X main.Version=${VERSION} -X main.BuildTime=$(date -u '+%Y-%m-%d_%H:%M:%S') -X main.GitCommit=${GITHUB_SHA::8}" \
          -o "${OUTPUT_NAME}" \
          ./cmd/server
          
        # Create checksum
        if [ "${{ matrix.goos }}" != "windows" ]; then
          shasum -a 256 "${OUTPUT_NAME}" > "${OUTPUT_NAME}.sha256"
        else
          sha256sum "${OUTPUT_NAME}" > "${OUTPUT_NAME}.sha256"
        fi
        
    - name: Compress binary
      if: matrix.goos != 'windows'
      run: |
        tar -czf "youtube-mcp-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz" \
          "youtube-mcp-${{ matrix.goos }}-${{ matrix.goarch }}" \
          "youtube-mcp-${{ matrix.goos }}-${{ matrix.goarch }}.sha256"
          
    - name: Compress Windows binary
      if: matrix.goos == 'windows'
      run: |
        zip "youtube-mcp-${{ matrix.goos }}-${{ matrix.goarch }}.zip" \
          "youtube-mcp-${{ matrix.goos }}-${{ matrix.goarch }}.exe" \
          "youtube-mcp-${{ matrix.goos }}-${{ matrix.goarch }}.exe.sha256"
          
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: youtube-mcp-${{ matrix.goos }}-${{ matrix.goarch }}
        path: |
          youtube-mcp-${{ matrix.goos }}-${{ matrix.goarch }}*
          !*.tar.gz
          !*.zip
        retention-days: 7
        
    - name: Upload compressed artifacts
      uses: actions/upload-artifact@v4
      with:
        name: youtube-mcp-${{ matrix.goos }}-${{ matrix.goarch }}-compressed
        path: |
          *.tar.gz
          *.zip
        retention-days: 30

  # Docker build job
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test, static-analysis]
    permissions:
      contents: read
      packages: write
      security-events: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-,format=short
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ github.ref_name }}
          BUILD_TIME=${{ github.event.head_commit.timestamp }}
          GIT_COMMIT=${{ github.sha }}
          
    - name: Run Trivy vulnerability scanner (Docker)
      if: github.event_name != 'pull_request'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE_NAME }}:${{ steps.meta.outputs.version }}
        format: 'sarif'
        output: 'trivy-docker-results.sarif'
        
    - name: Upload Trivy Docker SARIF
      if: github.event_name != 'pull_request'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: trivy-docker-results.sarif
        category: trivy-docker

  # Release job
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, docker, integration-test]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    - name: Organize release assets
      run: |
        mkdir -p release
        
        # Move compressed binaries
        find artifacts -name "*.tar.gz" -o -name "*.zip" | while read file; do
          mv "$file" release/
        done
        
        # Create checksums file
        cd release
        shasum -a 256 * > checksums.sha256
        cd ..
        
    - name: Install tools
      run: make tools
        
    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog for this version
        .tools/bin/git-chglog -o CHANGELOG_RELEASE.md ${{ github.ref_name }}
        
        # Get release notes for this version only
        .tools/bin/git-chglog ${{ github.ref_name }} > RELEASE_NOTES.md
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        name: ${{ github.ref_name }}
        body_path: RELEASE_NOTES.md
        files: |
          release/*
          CHANGELOG_RELEASE.md
        draft: false
        prerelease: ${{ contains(github.ref_name, '-') }}
        generate_release_notes: true
        
    - name: Update Homebrew Formula
      if: ${{ !contains(github.ref_name, '-') }}
      run: |
        echo "TODO: Update Homebrew formula"
        # This would typically trigger a workflow in your homebrew-tap repository

  # Summary job
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [dependency-check, static-analysis, security-scan, test, integration-test, build, docker]
    
    steps:
    - name: Summary
      run: |
        echo "## CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Job status summary
        echo "### Job Status" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Dependency Check | ${{ needs.dependency-check.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Static Analysis | ${{ needs.static-analysis.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Tests | ${{ needs.integration-test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker | ${{ needs.docker.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Additional information
        echo "### Build Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Workflow:** ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        
    - name: Check overall status
      if: |
        needs.dependency-check.result == 'failure' ||
        needs.static-analysis.result == 'failure' ||
        needs.security-scan.result == 'failure' ||
        needs.test.result == 'failure' ||
        needs.integration-test.result == 'failure' ||
        needs.build.result == 'failure' ||
        needs.docker.result == 'failure'
      run: |
        echo "::error::One or more CI jobs failed"
        exit 1